/*\
|*|
|*|  :: cookies.js ::
|*|
|*|  A complete cookies reader/writer framework with full unicode support.
|*|
|*|  Revision #1 - September 4, 2014
|*|
|*|  https://developer.mozilla.org/en-US/docs/Web/API/document.cookie
|*|  https://developer.mozilla.org/User:fusionchess
|*|
|*|  This framework is released under the GNU Public License, version 3 or later.
|*|  http://www.gnu.org/licenses/gpl-3.0-standalone.html
|*|
|*|  Syntaxes:
|*|
|*|  * docCookies.setItem(name, value[, end[, path[, domain[, secure]]]])
|*|  * docCookies.getItem(name)
|*|  * docCookies.removeItem(name[, path[, domain]])
|*|  * docCookies.hasItem(name)
|*|  * docCookies.keys()
|*|
\*/

var docCookies = {
  getItem: function (sKey) {
    if (!sKey) { return null; }
    return decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
  },
  setItem: function (sKey, sValue, vEnd, sPath, sDomain, bSecure) {
    if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) { return false; }
    var sExpires = "";
    if (vEnd) {
      switch (vEnd.constructor) {
        case Number:
          sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + vEnd;
          break;
        case String:
          sExpires = "; expires=" + vEnd;
          break;
        case Date:
          sExpires = "; expires=" + vEnd.toUTCString();
          break;
      }
    }
    document.cookie = encodeURIComponent(sKey) + "=" + encodeURIComponent(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : "");
    return true;
  },
  removeItem: function (sKey, sPath, sDomain) {
    if (!this.hasItem(sKey)) { return false; }
    document.cookie = encodeURIComponent(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "");
    return true;
  },
  hasItem: function (sKey) {
    if (!sKey) { return false; }
    return (new RegExp("(?:^|;\\s*)" + encodeURIComponent(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(document.cookie);
  },
  keys: function () {
    var aKeys = document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g, "").split(/\s*(?:\=[^;]*)?;\s*/);
    for (var nLen = aKeys.length, nIdx = 0; nIdx < nLen; nIdx++) { aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]); }
    return aKeys;
  }
};

(function() {
  var uploadForm = document.forms['upload-select-image'];
  var resizeForm = document.forms['upload-resize'];
  var filterForm = document.forms['upload-filter'];

  var previewImage = filterForm.querySelector('.filter-image-preview');
  var prevButton = filterForm['filter-prev'];
  var selectedFilter = filterForm['upload-filter'];

  var filterMap;
  var diff = new Date - new Date(1989, 8, 25);
  var expires = new Date;
  expires.setTime(Date.now() + diff);

  if (docCookies && docCookies.hasItem('filter')) {
    var filter = docCookies.getItem('filter');

    previewImage.className = 'filter-image-preview' + ' ' + filter;

    if (filterForm['upload-filter-'+filter]) {
      selectedFilter.value = filter;
    }
  }


  function setFilter() {
    if (!filterMap) {
      filterMap = {
        'none': 'filter-none',
        'chrome': 'filter-chrome',
        'sepia': 'filter-sepia'
      };
    }

    previewImage.className = 'filter-image-preview' + ' ' + filterMap[selectedFilter.value];
    if (docCookies) {
      docCookies.setItem('filter', selectedFilter.value, expires);
    }
  };



  for (var i = 0, l = selectedFilter.length; i < l; i++) {
    selectedFilter[i].onchange = function(evt) {
      setFilter();
    }
  }

  prevButton.onclick = function(evt) {
    evt.preventDefault();

    filterForm.reset();
    filterForm.classList.add('invisible');
    resizeForm.classList.remove('invisible');
  };

  filterForm.onsubmit = function(evt) {
    evt.preventDefault();

    uploadForm.classList.remove('invisible');
    filterForm.classList.add('invisible');
  }

  setFilter();
})();

(function() {
  var images = [
    'img/logo-background-1.jpg',
    'img/logo-background-2.jpg',
    'img/logo-background-3.jpg'
  ];

  var backgroundElement = document.querySelector('.upload');
  var randomImageNumber = Math.round(Math.random() * (images.length - 1));
  backgroundElement.style.backgroundImage = 'url(' + images[randomImageNumber] + ')';
})();

(function() {
  var uploadForm = document.forms['upload-select-image'];
  var resizeForm = document.forms['upload-resize'];
  var filterForm = document.forms['upload-filter'];

  var previewImage = resizeForm.querySelector('.resize-image-preview'),
      prevButton = resizeForm['resize-prev'],
      resizeFieldX = resizeForm['resize-x'],
      resizeFieldY = resizeForm['resize-y'],
      resizeFieldSize = resizeForm['resize-size'],
      isImageloaded = false,
      imgW = 0,
      imgH = 0,
      maxSize = 0,
      maxOffsetX = resizeFieldX.value || 0,
      maxOffsetY = resizeFieldY.value || 0;



  var setupField = function(field, max, min) {
    var val = parseInt(field.value) || 0,
        min = typeof min !== 'undefined' ? min : field.min || 0;
    if (val < min) {
      field.value = min;
    } else if (val > max) {
      field.value = max;
    }

    field.max = max;
    field.min = min;

    return;
  }

  // fast test image
  // resizeForm.classList.remove('invisible');
  // uploadForm.classList.add('invisible');
  // previewImage.src = 'img/logo-background-2.jpg';

  previewImage.onload = function(ev) {
    isImageloaded = true;
    imgW = this.offsetWidth;
    imgH = this.offsetHeight;
    maxSize = Math.min(imgW, imgH);
  }


  resizeFieldSize.onchange = function(ev) {
    setupField(resizeFieldSize, maxSize, 1);
    var val = parseInt(this.value);

    if (val) {
      maxOffsetX = imgW - val;
      maxOffsetY = imgH - val;
      setupField(resizeFieldX, maxOffsetX);
      setupField(resizeFieldY, maxOffsetY);

    }

  }

  resizeFieldX.onchange = function(ev) {
    setupField(resizeFieldX, imgW - 1, 0);

    maxOffsetX = parseInt(this.value) || 0;

    setupField(resizeFieldSize, Math.min(imgW - maxOffsetX,imgH - maxOffsetY));
  }

  resizeFieldY.onchange = function(ev) {
    setupField(resizeFieldY, imgH - 1, 0);

    maxOffsetY = parseInt(this.value) || 0;
    console.log(imgW - maxOffsetX,imgH - maxOffsetY);
    setupField(resizeFieldSize, Math.min(imgW - maxOffsetX,imgH - maxOffsetY));
  }


  prevButton.onclick = function(evt) {
    evt.preventDefault();

    resizeForm.reset();
    uploadForm.reset();
    isImageloaded = false;
    resizeForm.classList.add('invisible');
    uploadForm.classList.remove('invisible');
  };

  resizeForm.onsubmit = function(evt) {
    evt.preventDefault();

    if (!isImageloaded || !maxSize) {
      alert('Изображение недоступно');
      return;
    }

    if (!resizeFieldSize.value) {
      alert('Сначала выберите кадрирование');
      return;
    }

    filterForm.elements['filter-image-src'] = previewImage.src;

    resizeForm.classList.add('invisible');
    filterForm.classList.remove('invisible');
  };
})();

(function() {
  var uploadForm = document.forms['upload-select-image'];
  var resizeForm = document.forms['upload-resize'];
  var filterForm = document.forms['upload-filter'];

  var fileElement = uploadForm['upload-file'];

  function uploadImage(element, callback) {
    var fileReader = new FileReader();
    fileReader.onload = function(evt) {
      var image = evt.target.result;
      callback(image);
    }

    fileReader.readAsDataURL(element.files[0]);
  }

  fileElement.onchange = function(evt) {
    if (fileElement.value) {
      fileElement.classList.add('upload-input-hasvalue');
    }
  };

  uploadForm.onsubmit = function(evt) {
    evt.preventDefault();

    uploadImage(fileElement, function(image) {
      sessionStorage.setItem('uploaded-image', image);
      resizeForm.querySelector('.resize-image-preview').src = image;
      filterForm.querySelector('.filter-image-preview').src = image;

      uploadForm.classList.add('invisible');
      resizeForm.classList.remove('invisible');
    });
  };

  uploadForm.onreset = function() {
    fileElement.classList.remove('upload-input-hasvalue');
  };
})();

document.addEventListener("DOMContentLoaded", function(){
  // console.log('hey!');
});
